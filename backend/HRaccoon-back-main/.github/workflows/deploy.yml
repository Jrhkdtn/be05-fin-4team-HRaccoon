name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: set yml secret
      uses: microsoft/variable-substitution@v1 # Github Market Place 에서 제공하는 Action
      with:
        files: './src/main/resources/application.yml, ./src/main/resources/application-prod.yml'
      env:
        spring.jwt.secret-key: ${{ secrets.JWT_SECRET_KEY }}
        spring.mail.password: ${{ secrets.GMAIL_PASSWORD }}
        spring.datasource.url: ${{ secrets.RDS_URL }}
        spring.datasource.username: ${{ secrets.RDS_USERNAME }}
        spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
        spring.data.redis.host: ${{ secrets.AWS_ELASTICACHE_ENDPOINT }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test

    - name: Docker Build
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -t app .
        docker tag app ${{ secrets.DOCKER_USERNAME }}/hraccoon:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/hraccoon:latest

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/hraccoon:latest
          docker stop $(docker ps -a -q)
          docker run -d --log-driver=syslog --network host -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/hraccoon:latest
          docker rm $(docker ps --filter 'status=exited' -a -q)
          docker image prune -a -f
      


